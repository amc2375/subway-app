{"ast":null,"code":"var _jsxFileName = \"/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js\";\nimport React, { useState } from \"react\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from \"recharts\";\nimport daily from \"./daily.json\";\nimport station_id_key from \"./data/station_id_key.json\";\nimport turnstile_daily from './data/turnstile_daily.json';\nconst data = [{\n  name: \"Page A\",\n  uv: 400,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: \"Page B\",\n  uv: 500,\n  pv: 1000,\n  amt: 2300\n}, {\n  name: \"Page C\",\n  uv: 450,\n  pv: 2600,\n  amt: 2500\n}];\nconst data2 = [{\n  name: \"Page A\",\n  uv: 400,\n  pv: 1500,\n  amt: 2400\n}, {\n  name: \"Page B\",\n  uv: 500,\n  pv: 3000,\n  amt: 2300\n}, {\n  name: \"Page C\",\n  uv: 450,\n  pv: 2000,\n  amt: 2500\n}];\n\nfunction RenderLineChart() {\n  //create options for select using station_id_key\n  const SelectItems = ({\n    data\n  }) => data.map(obj => /*#__PURE__*/React.createElement(\"option\", {\n    value: obj.gtfs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, obj.station_lines));\n  /* testing with data and data2 */\n\n\n  const dataController = {\n    true: data,\n    false: data2\n  };\n  const [controller, setController] = useState(true);\n  const _data = dataController[controller];\n\n  const handleClick = event => setController(!controller);\n  /* testing with daily data */\n\n\n  const dailyController = {\n    true: \"ent\",\n    false: \"ext\"\n  };\n  const [key, setKey] = useState(true);\n\n  const handleClickDaily = event => setKey(!key); //handle change in the drop down menu\n\n\n  const handleSelectChange = event => {\n    const selection = event.target.value;\n    console.log(selection);\n  }; // const filterCriteria = (data) => {\n  //   return data.gtfs == \n  // } \n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => handleClick(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Update Fake Data\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => handleClickDaily(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Update Daily Data\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: event => handleSelectChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SelectItems, {\n    data: station_id_key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 300,\n    data: turnstile_daily,\n    margin: {\n      top: 5,\n      right: 20,\n      bottom: 5,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"ent\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date_time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 300,\n    data: daily,\n    margin: {\n      top: 5,\n      right: 20,\n      bottom: 5,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: dailyController[key],\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"ent\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"DATE_TIME\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default RenderLineChart;","map":{"version":3,"sources":["/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js"],"names":["React","useState","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","daily","station_id_key","turnstile_daily","data","name","uv","pv","amt","data2","RenderLineChart","SelectItems","map","obj","gtfs","station_lines","dataController","true","false","controller","setController","_data","handleClick","event","dailyController","key","setKey","handleClickDaily","handleSelectChange","selection","target","value","console","log","top","right","bottom","left"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nimport daily from \"./daily.json\";\nimport station_id_key from \"./data/station_id_key.json\"\nimport turnstile_daily from './data/turnstile_daily.json'\n\nconst data = [\n  { name: \"Page A\", uv: 400, pv: 2400, amt: 2400 },\n  { name: \"Page B\", uv: 500, pv: 1000, amt: 2300 },\n  { name: \"Page C\", uv: 450, pv: 2600, amt: 2500 },\n];\nconst data2 = [\n  { name: \"Page A\", uv: 400, pv: 1500, amt: 2400 },\n  { name: \"Page B\", uv: 500, pv: 3000, amt: 2300 },\n  { name: \"Page C\", uv: 450, pv: 2000, amt: 2500 },\n];\n\n\n\nfunction RenderLineChart() {\n\n  //create options for select using station_id_key\n  const SelectItems = ({data}) => \n    (data.map(obj => \n      <option value = {obj.gtfs}>{obj.station_lines}</option>\n      ))\n\n /* testing with data and data2 */\n  const dataController = { true: data, false: data2 };\n\n  const [controller, setController] = useState(true);\n  const _data = dataController[controller];\n  const handleClick = (event) => setController(!controller);\n\n  /* testing with daily data */\n  const dailyController = {true: \"ent\", false:\"ext\"}\n  const [key, setKey] = useState(true)\n  const handleClickDaily = (event) => setKey(!key);\n\n\n//handle change in the drop down menu\n  const handleSelectChange = (event) => {\n    const selection = event.target.value;\n    console.log(selection);\n  }\n\n  // const filterCriteria = (data) => {\n  //   return data.gtfs == \n  // } \n\n  return (\n    <div>\n      <button onClick={(event) => handleClick(event)}>Update Fake Data</button>\n      <button onClick={(event) => handleClickDaily(event)}>Update Daily Data</button>\n\n      <select onChange = {(event) => handleSelectChange(event)}>\n        <SelectItems data = {station_id_key} />\n        </select>\n\n      <LineChart \n        width = {600} \n        height = {300} \n        data = {turnstile_daily}\n        margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n        >\n        <Line type=\"monotone\" dataKey=\"ent\" stroke=\"#8884d8\" />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis dataKey=\"date_time\" />\n        <YAxis />\n        <Tooltip />\n      </LineChart>\n\n      <LineChart\n        width={600}\n        height={300}\n        data={daily}\n        margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n      >\n        <Line type=\"monotone\" dataKey={dailyController[key]} stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"ent\" stroke=\"#8884d8\" />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis dataKey=\"DATE_TIME\" />\n        <YAxis />\n        <Tooltip />\n      </LineChart>\n    </div>\n  );\n}\n\nexport default RenderLineChart;\n"]},"metadata":{},"sourceType":"module"}