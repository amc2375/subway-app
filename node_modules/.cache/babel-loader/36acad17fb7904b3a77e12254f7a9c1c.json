{"ast":null,"code":"var _jsxFileName = \"/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js\";\nimport React, { useState } from \"react\";\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis, ResponsiveContainer } from \"recharts\";\nimport { Switch } from \"@rebass/forms\";\nimport station_id_key from \"./data/station_id_key.json\";\nimport turnstile_daily from './data/turnstile_daily.json';\nimport { ThemeProvider } from 'emotion-theming';\nimport theme from '@rebass/preset';\n\nfunction RenderLineChart(props) {\n  const selectedGTFS = props.gtfs;\n  const nameResult = station_id_key.find(({\n    gtfs\n  }) => gtfs === selectedGTFS);\n  const selectedStationName = nameResult.station_lines; //const selectedStationName = station_id_key.find(element => element.gtfs == selectedGTFS)['station_lines']\n  //const result = inventory.find( ({ name }) => name === 'cherries' );\n  // console.log(result) // { name: 'cherries', quantity: 5 }\n  //create options for select using station_id_key\n\n  const SelectItems = ({\n    data\n  }) => data.map(obj => /*#__PURE__*/React.createElement(\"option\", {\n    value: obj.gtfs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, obj.station_lines));\n  /* testing with daily data */\n  // const dailyController = {true: \"ent\", false:\"ext\"}\n  // const [key, setKey] = useState(true)\n  // const handleClickDaily = (event) => setKey(!key);\n\n\n  const dataController = {\n    true: \"ent\",\n    false: \"ent_pct_dif\"\n  };\n  const [key, setKey] = useState(true);\n\n  const handleClickData = event => setKey(!key);\n\n  const clickRaw = event => setKey;\n\n  const [selection, setSelection] = useState(props.gtfs);\n  const [y, setY] = useState([turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n  })]); //version of y that just depends on the props 'gtfs'... depends if we're using the drop down at all\n\n  const y2 = turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n  }); //handle change in the drop down menu\n\n  const handleSelectChange = event => {\n    const _selection = event.target.value;\n    setSelection(_selection);\n    const filteredArray = turnstile_daily.filter(function (obj) {\n      return obj.gtfs === _selection;\n    });\n    setY(filteredArray);\n    props.setLineStation(event.target.value);\n  }; // const handleBarSelect = (props.gtfs) => {\n  //   const _selection = props.gtfs;\n  //   setSelection(_selection);\n  //   const filteredArray = turnstile_daily.filter(function (obj) {\n  //     return obj.gtfs === _selection;\n  //   });\n  //   setY(filteredArray);\n  // }\n  //console.log(selectedGTFS)\n  //console.log(selection)\n  //console.log(turnstile_daily)\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"raw\",\n    name: \"chart_type\",\n    value: \"raw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"raw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Raw Data\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 42\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"pct_dif\",\n    name: \"chart_type\",\n    value: \"pct_dif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"pct_dif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Percent Difference\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 56\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: event => handleSelectChange(event),\n    value: selection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    selected: true,\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"Choose a station\"), /*#__PURE__*/React.createElement(SelectItems, {\n    data: station_id_key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LineChart, {\n    width: 800,\n    height: 350,\n    data: y2,\n    margin: {\n      top: 5,\n      right: 20,\n      bottom: 5,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: dataController[key],\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date_time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  })), selectedStationName);\n}\n\nexport default RenderLineChart;","map":{"version":3,"sources":["/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js"],"names":["React","useState","CartesianGrid","Line","LineChart","Tooltip","XAxis","YAxis","ResponsiveContainer","Switch","station_id_key","turnstile_daily","ThemeProvider","theme","RenderLineChart","props","selectedGTFS","gtfs","nameResult","find","selectedStationName","station_lines","SelectItems","data","map","obj","dataController","true","false","key","setKey","handleClickData","event","clickRaw","selection","setSelection","y","setY","filter","y2","handleSelectChange","_selection","target","value","filteredArray","setLineStation","top","right","bottom","left"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis, ResponsiveContainer} from \"recharts\";\nimport {Switch} from \"@rebass/forms\"\nimport station_id_key from \"./data/station_id_key.json\";\nimport turnstile_daily from './data/turnstile_daily.json';\nimport { ThemeProvider } from 'emotion-theming'\nimport theme from '@rebass/preset'\n\n\nfunction RenderLineChart(props) {\n  const selectedGTFS = props.gtfs;\n  const nameResult = station_id_key.find(({gtfs}) => gtfs === selectedGTFS);\n  const selectedStationName = nameResult.station_lines\n  //const selectedStationName = station_id_key.find(element => element.gtfs == selectedGTFS)['station_lines']\n  \n  //const result = inventory.find( ({ name }) => name === 'cherries' );\n\n // console.log(result) // { name: 'cherries', quantity: 5 }\n\n\n  //create options for select using station_id_key\n  const SelectItems = ({data}) => \n    (data.map(obj => \n      <option value = {obj.gtfs}>{obj.station_lines}</option>\n      ))\n\n  /* testing with daily data */\n  // const dailyController = {true: \"ent\", false:\"ext\"}\n  // const [key, setKey] = useState(true)\n  // const handleClickDaily = (event) => setKey(!key);\n\n  const dataController = {true: \"ent\", false: \"ent_pct_dif\"}\n  const [key, setKey] = useState(true)\n  const handleClickData = (event) => setKey(!key);\n  const clickRaw = (event) => setKey\n\n  const [selection, setSelection] = useState(props.gtfs)\n  const [y, setY] = useState([turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n    })])\n  \n  //version of y that just depends on the props 'gtfs'... depends if we're using the drop down at all\n  const y2 = turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n  })\n\n//handle change in the drop down menu\n  const handleSelectChange = (event) => {\n    const _selection = event.target.value;\n    setSelection(_selection);\n    const filteredArray = turnstile_daily.filter(function (obj) {\n      return obj.gtfs === _selection;\n    });\n    setY(filteredArray);\n    props.setLineStation(event.target.value)\n  }\n  // const handleBarSelect = (props.gtfs) => {\n  //   const _selection = props.gtfs;\n  //   setSelection(_selection);\n  //   const filteredArray = turnstile_daily.filter(function (obj) {\n  //     return obj.gtfs === _selection;\n  //   });\n  //   setY(filteredArray);\n  // }\n\n  //console.log(selectedGTFS)\n  //console.log(selection)\n  //console.log(turnstile_daily)\n\n  return (\n\n   \n    <div>\n      {/* <button onClick={(event) => handleClickData(event)}>Change to pct dif</button> */}\n      {/* <Switch id = \"test\" value = \"test\"/> */}\n \n        <input type=\"radio\" id=\"raw\" name=\"chart_type\" value=\"raw\" />\n        <label for=\"raw\">Raw Data</label><br></br>\n        <input type=\"radio\" id=\"pct_dif\" name=\"chart_type\" value=\"pct_dif\" />\n        <label for=\"pct_dif\">Percent Difference</label><br></br>\n     \n      \n\n      <select \n        onChange = {(event) => handleSelectChange(event)} \n        value = {selection}\n        >\n          <option value=\"\" selected disabled>Choose a station</option>\n          <SelectItems data = {station_id_key} />\n        </select>\n\n      \n        <LineChart\n          width = {800}\n          height = {350}\n          data={y2}\n          margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n        >\n          <Line type=\"monotone\" dataKey={dataController[key]} stroke=\"#8884d8\" />\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"date_time\" />\n          <YAxis />\n          <Tooltip />\n        </LineChart>\n{selectedStationName}\n\n    </div>\n  );\n}\n\nexport default RenderLineChart;\n"]},"metadata":{},"sourceType":"module"}