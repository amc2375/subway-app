{"ast":null,"code":"var _jsxFileName = \"/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderBarChart.js\";\nimport React, { useState } from \"react\";\nimport { BarChart, Bar, Cell, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from \"recharts\";\nimport subways_with_tracts from './data/subways_with_tracts.json';\n\nfunction RenderBarChart() {\n  const var_key = [{\n    key: 'DP03_0062E',\n    variable_name: 'Median Household Income'\n  }, {\n    key: 'DP03_0119E',\n    variable_name: 'Percentage of Families and People Whose Income in the Past 12 Months is Below the Poverty Level'\n  }, {\n    key: 'DP03_0119PE',\n    variable_name: 'Percentage of Families and People Whose Income in the Past 12 Months is Below the Poverty Level (%)'\n  }, {\n    key: 'DP02_0015E',\n    variable_name: 'Average Household Size'\n  }, {\n    key: 'DP02_0014PE',\n    variable_name: 'Percentage of Households with One or More People 65 Years and Over'\n  }, {\n    key: 'DP03_0042PE',\n    variable_name: 'Percentage of Civilian Employed Population in Educational Services, Health Care, or Social Assistance Industry'\n  }, {\n    key: 'DP04_0136E',\n    variable_name: 'Gross Rent as a Percentage of Houshold Income'\n  }, {\n    key: 'DP04_0136PE',\n    variable_name: 'Gross Rent as a Percentage of Household Income (%?)'\n  }, {\n    key: 'DP05_0038PE',\n    variable_name: 'Black Population (%)'\n  }, {\n    key: 'DP05_0037PE',\n    variable_name: 'White Population (%)'\n  }, {\n    key: 'DP05_0044PE',\n    variable_name: 'Asian Population (%)'\n  }, {\n    key: 'DP05_0071PE',\n    variable_name: 'Hispanic or Latinx Population (%)'\n  }];\n  const [barVar, setBarVar] = useState('DP05_0071PE');\n\n  const handleIncomeClick = event => {\n    setBarVar('DP03_0062E');\n    subways_with_tracts.sort(compareValues('DP03_0062E'));\n  };\n\n  function compareValues(key) {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        //property doesn't exist for either object\n        return 0;\n      }\n\n      return parseFloat(a.key) - parseFloat(b.key);\n    };\n  } //console.log(subways_with_tracts.sort((a,b) => a.DP05_0071PE-b.DP05_0071PE))\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => handleIncomeClick(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Median Household Income\"), /*#__PURE__*/React.createElement(BarChart, {\n    width: 600,\n    height: 300,\n    data: subways_with_tracts,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"Stop_Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: barVar,\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default RenderBarChart;","map":{"version":3,"sources":["/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderBarChart.js"],"names":["React","useState","BarChart","Bar","Cell","CartesianGrid","XAxis","YAxis","Tooltip","Legend","subways_with_tracts","RenderBarChart","var_key","key","variable_name","barVar","setBarVar","handleIncomeClick","event","sort","compareValues","innerSort","a","b","hasOwnProperty","parseFloat","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nimport subways_with_tracts from './data/subways_with_tracts.json'\n\nfunction RenderBarChart() {\n    const var_key = [\n        {\n            key: 'DP03_0062E', variable_name:'Median Household Income'\n        },\n        {\n            key: 'DP03_0119E', variable_name:'Percentage of Families and People Whose Income in the Past 12 Months is Below the Poverty Level'\n        },\n        {\n            key: 'DP03_0119PE', variable_name: 'Percentage of Families and People Whose Income in the Past 12 Months is Below the Poverty Level (%)'\n        },\n        {\n            key: 'DP02_0015E', variable_name:'Average Household Size'\n        },\n        {\n            key: 'DP02_0014PE', variable_name:'Percentage of Households with One or More People 65 Years and Over'\n        },\n        {\n            key: 'DP03_0042PE', variable_name:'Percentage of Civilian Employed Population in Educational Services, Health Care, or Social Assistance Industry'\n        },\n        {\n            key: 'DP04_0136E', variable_name:'Gross Rent as a Percentage of Houshold Income'\n        },\n        {\n            key: 'DP04_0136PE', variable_name:'Gross Rent as a Percentage of Household Income (%?)'\n        },\n        {\n            key: 'DP05_0038PE', variable_name:'Black Population (%)'\n        },\n        {\n            key: 'DP05_0037PE', variable_name:'White Population (%)'\n        },\n        {\n            key: 'DP05_0044PE', variable_name:'Asian Population (%)'\n        },\n        {\n            key: 'DP05_0071PE', variable_name:'Hispanic or Latinx Population (%)'\n        }\n    ];\n\n    const [barVar, setBarVar] = useState('DP05_0071PE');\n    const handleIncomeClick = (event) => {\n        setBarVar('DP03_0062E');\n        subways_with_tracts.sort(compareValues('DP03_0062E'));\n    }\n    function compareValues(key) {\n        return function innerSort(a,b) {\n            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n                //property doesn't exist for either object\n                return 0;\n            }\n            return parseFloat(a.key)-parseFloat(b.key);\n        }\n    }\n\n    //console.log(subways_with_tracts.sort((a,b) => a.DP05_0071PE-b.DP05_0071PE))\n\n    return (\n        <div>\n            <button onClick={(event) => handleIncomeClick(event)}>Median Household Income</button>\n            <BarChart\n                width={600}\n                height={300}\n                data={subways_with_tracts}\n                margin={{\n                top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"Stop_Name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey={barVar} fill=\"#8884d8\" />\n            </BarChart>\n\n        </div>\n\n    );\n}\n\nexport default RenderBarChart;\n\n"]},"metadata":{},"sourceType":"module"}