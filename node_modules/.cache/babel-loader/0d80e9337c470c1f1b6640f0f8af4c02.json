{"ast":null,"code":"var _jsxFileName = \"/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderBarChart.js\";\nimport React, { useState } from \"react\";\nimport { Label, Radio } from '@rebass/forms';\nimport { Box, Card, Button } from 'rebass';\nimport styled from 'styled-components';\nimport { BarChart, Bar, Cell, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from \"recharts\";\nimport subways_with_tracts from './data/subways_with_tracts.json';\nimport census_metadata from './data/census_metadata.json';\nconst StyledHalves = styled.div`\n  flex: 0 0 100%;\n  max-height: 50%;\n  min-height: 50%;\n  max-width: 100%;\n  border: 1px solid red;\n  padding: .5em;\n  overflow: hidden;\n`;\nconst manhattanStyle = styled.div`\n    color: yellow;\n`;\n\nfunction RenderBarChart(props) {\n  const [barVar, setBarVar] = useState('DP03_0062E');\n  const [legendVar, setLegendVar] = useState('Median Household Income');\n  const [data, setData] = useState(subways_with_tracts);\n  const [station, setStation] = useState();\n  const boroughColors = [{\n    borough: \"Bk\",\n    color: \"#003049\"\n  }, {\n    borough: \"M\",\n    color: \"#d62828\"\n  }, {\n    borough: \"Q\",\n    color: \"#f77f00\"\n  }, {\n    borough: \"Bx\",\n    color: \"#fcbf49\"\n  }, {\n    borough: \"SI\",\n    color: \"#eae2b7\"\n  }];\n\n  const handleRadioClick = event => {\n    setBarVar(event.target.id);\n    setLegendVar(event.target.value);\n    const _barVar = event.target.id; //const _legendVar = event.target.value;\n\n    setData(data.sort((a, b) => b[_barVar] - a[_barVar]));\n  };\n\n  const handleBarClick = (data, index) => {\n    setStation(data.gtfs_id);\n    props.setLineStation(data.gtfs_id);\n  }; //console.log(subways_with_tracts);\n\n\n  const buttonColors = ['#d62828', '#f77f00', '#fcbf49', '#eae2b7', '#d62828', '#f77f00', '#fcbf49', '#eae2b7', '#d62828', '#f77f00', '#fcbf49', '#eae2b7'];\n\n  const RadioItems = ({\n    data\n  }) => data.map((obj, index) => /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      backgroundColor: buttonColors[index]\n    },\n    variant: \"primary\",\n    name: \"variable\",\n    id: obj.key,\n    value: obj.variable_name,\n    onClick: event => handleRadioClick(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, obj.variable_name));\n\n  const CustomToolTip = ({\n    active,\n    payload,\n    label\n  }) => {\n    if (active) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 23\n        }\n      }, `${label} : ${payload.value}`), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"desc\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 23\n        }\n      }, \"I am confused by this help\"));\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledHalves, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RadioItems, {\n    data: census_metadata,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(StyledHalves, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, legendVar), /*#__PURE__*/React.createElement(BarChart, {\n    width: 600,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"Stop_Name\",\n    tick: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: barVar,\n    name: legendVar,\n    onClick: handleBarClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, data.map(entry => /*#__PURE__*/React.createElement(Cell, {\n    fill: entry.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"body\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"manhattanStyle\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, \"Manhattan\")), /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"200\",\n    height: \"150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: \"100\",\n    y: \"100\",\n    width: \"25\",\n    height: \"25\",\n    fill: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default RenderBarChart;","map":{"version":3,"sources":["/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderBarChart.js"],"names":["React","useState","Label","Radio","Box","Card","Button","styled","BarChart","Bar","Cell","CartesianGrid","XAxis","YAxis","Tooltip","Legend","subways_with_tracts","census_metadata","StyledHalves","div","manhattanStyle","RenderBarChart","props","barVar","setBarVar","legendVar","setLegendVar","data","setData","station","setStation","boroughColors","borough","color","handleRadioClick","event","target","id","value","_barVar","sort","a","b","handleBarClick","index","gtfs_id","setLineStation","buttonColors","RadioItems","map","obj","backgroundColor","key","variable_name","CustomToolTip","active","payload","label","top","right","left","bottom","entry"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport {Label, Radio} from '@rebass/forms'\nimport {Box, Card, Button} from 'rebass'\nimport styled from 'styled-components'\n\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nimport subways_with_tracts from './data/subways_with_tracts.json'\nimport census_metadata from './data/census_metadata.json'\n\nconst StyledHalves = styled.div `\n  flex: 0 0 100%;\n  max-height: 50%;\n  min-height: 50%;\n  max-width: 100%;\n  border: 1px solid red;\n  padding: .5em;\n  overflow: hidden;\n`\nconst manhattanStyle = styled.div `\n    color: yellow;\n`\n\nfunction RenderBarChart(props) {\n\n    const [barVar, setBarVar] = useState('DP03_0062E');\n    const [legendVar, setLegendVar] = useState('Median Household Income')\n    const [data, setData] = useState(subways_with_tracts);\n    const [station, setStation] = useState()\n\n    const boroughColors = [\n        {\n            borough: \"Bk\", color: \"#003049\"\n        },\n        {\n            borough: \"M\", color: \"#d62828\"\n        },\n        {\n            borough: \"Q\", color: \"#f77f00\"\n        },\n        {\n            borough: \"Bx\", color: \"#fcbf49\"\n        },\n        {\n            borough: \"SI\", color: \"#eae2b7\"\n        }\n    ]   \n\n    const handleRadioClick = (event) => {\n        setBarVar(event.target.id);\n        setLegendVar(event.target.value)\n        const _barVar = event.target.id;\n        //const _legendVar = event.target.value;\n        setData(data.sort((a,b) => b[_barVar] - a[_barVar]))\n    }\n\n    const handleBarClick = (data, index) => {\n        setStation(data.gtfs_id);\n        props.setLineStation(data.gtfs_id);\n    }\n    //console.log(subways_with_tracts);\n    const buttonColors = ['#d62828', '#f77f00', '#fcbf49','#eae2b7', '#d62828', '#f77f00', '#fcbf49','#eae2b7', '#d62828', '#f77f00', '#fcbf49','#eae2b7']\n    const RadioItems = ({data}) => \n        (data.map((obj,index) => \n     \n                    <Button\n                        sx = {{\n                            backgroundColor: buttonColors[index]\n                        }}\n                        variant = 'primary'\n                        name = 'variable'\n                        id = {obj.key}\n                        value = {obj.variable_name}\n                        onClick = {(event) => handleRadioClick(event)} \n                    >\n\n                    {/* <Button\n                        >Something random\n                    </Button> */}\n                    {obj.variable_name}\n                    </Button>\n            \n\n        ))\n\n      const CustomToolTip = ({ active, payload, label}) => {\n          if(active) {\n              return (\n                  <div className = \"custom-tooltip\">\n                      <p className = \"label\">{`${label} : ${payload.value}`}</p>\n                      <p className = \"desc\">I am confused by this help</p>\n                  </div>\n              )\n          }\n          return null;\n      }\n    return (\n        <div>\n            <StyledHalves>\n                <RadioItems data = {census_metadata} />\n            </StyledHalves>\n            <StyledHalves>\n                <h2>{legendVar}</h2>\n                <BarChart\n                    width={600}\n                    height={300}\n                    data={data}\n                    margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n                >    \n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"Stop_Name\" tick = {false}/>\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey = {barVar} name = {legendVar} onClick = {handleBarClick}>\n                        {data.map((entry) =>\n                            <Cell fill = {entry.color} />\n                        )}\n                    </Bar>\n                </BarChart>\n                <body>\n                    <manhattanStyle>Manhattan</manhattanStyle>  \n                </body>\n                <svg width = \"200\" height = \"150\">\n                    <rect x = \"100\" y = \"100\" width = \"25\" height = \"25\" fill = \"blue\"></rect>\n                </svg>\n                </StyledHalves>\n                </div>\n\n    );\n}\n\nexport default RenderBarChart;\n\n"]},"metadata":{},"sourceType":"module"}