{"ast":null,"code":"var _jsxFileName = \"/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js\";\nimport React, { useState } from \"react\";\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis, ResponsiveContainer, Label } from \"recharts\";\nimport { Switch } from \"@rebass/forms\";\nimport station_id_key from \"./data/station_id_key.json\";\nimport turnstile_daily from './data/turnstile_daily.json';\nimport { ThemeProvider } from 'emotion-theming';\nimport theme from '@rebass/preset';\nimport styled from 'styled-components';\nconst StyledUpperMatter = styled.div`\n  display:flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width:100%;\n  align-items: center;\n  height: 3%;\n`;\nconst StyledSelect = styled.div`\n\n`;\n\nfunction RenderLineChart(props) {\n  const selectedGTFS = props.gtfs;\n  const nameResult = turnstile_daily.find(({\n    gtfs\n  }) => gtfs === selectedGTFS); //const selectedStationName = nameResult.station_lines\n  // var selectedStationName = \"\"\n  // if ((nameResult.station_lines)) {\n  //   selectedStationName = nameResult.station_lines\n  // }\n  //const selectedStationName = station_id_key.find(element => element.gtfs == selectedGTFS)['station_lines']\n  //const result = inventory.find( ({ name }) => name === 'cherries' );\n  // console.log(result) // { name: 'cherries', quantity: 5 }\n  //create options for select using station_id_key\n\n  const SelectItems = ({\n    data\n  }) => data.map(obj => /*#__PURE__*/React.createElement(\"option\", {\n    value: obj.gtfs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, obj.station_lines));\n  /* testing with daily data */\n  // const dailyController = {true: \"ent\", false:\"ext\"}\n  // const [key, setKey] = useState(true)\n  // const handleClickDaily = (event) => setKey(!key);\n\n\n  const dataController = {\n    true: \"ent\",\n    false: \"ent_pct_dif\"\n  };\n  const [key, setKey] = useState(true);\n\n  const handleClickData = event => setKey(!key);\n\n  const clickRaw = event => setKey;\n\n  const [selection, setSelection] = useState(props.gtfs);\n  const [y, setY] = useState([turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n  })]); //version of y that just depends on the props 'gtfs'... depends if we're using the drop down at all\n\n  const y2 = turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n  }); //handle change in the drop down menu\n\n  const handleSelectChange = event => {\n    const _selection = event.target.value;\n    setSelection(_selection);\n    const filteredArray = turnstile_daily.filter(function (obj) {\n      return obj.gtfs === _selection;\n    });\n    setY(filteredArray);\n    props.setLineStation(event.target.value);\n  }; // const handleBarSelect = (props.gtfs) => {\n  //   const _selection = props.gtfs;\n  //   setSelection(_selection);\n  //   const filteredArray = turnstile_daily.filter(function (obj) {\n  //     return obj.gtfs === _selection;\n  //   });\n  //   setY(filteredArray);\n  // }\n  //console.log(selectedGTFS)\n  //console.log(selection)\n  //console.log(turnstile_daily)\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledUpperMatter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledSelect, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: event => handleSelectChange(event),\n    value: selection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    selected: true,\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Choose a station\"), /*#__PURE__*/React.createElement(SelectItems, {\n    data: station_id_key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Subway Turnstile Entries by Day\")), /*#__PURE__*/React.createElement(LineChart, {\n    width: 800,\n    height: 360,\n    data: y2,\n    margin: {\n      top: 5,\n      right: 20,\n      bottom: 5,\n      left: 0\n    },\n    label: {\n      value: 'Turnstile Entries',\n      position: 'insideTopRight'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: dataController[key],\n    stroke: \"#003049\",\n    strokeWidth: 2.5,\n    dot: false,\n    name: \"Entries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date_time\",\n    height: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    width: 95,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    value: \"Turnstile Entries\",\n    angle: -90,\n    position: \"insideLeft\",\n    offset: 6,\n    style: {\n      textAnchor: 'middle',\n      fill: 'grey'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default RenderLineChart;","map":{"version":3,"sources":["/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js"],"names":["React","useState","CartesianGrid","Line","LineChart","Tooltip","XAxis","YAxis","ResponsiveContainer","Label","Switch","station_id_key","turnstile_daily","ThemeProvider","theme","styled","StyledUpperMatter","div","StyledSelect","RenderLineChart","props","selectedGTFS","gtfs","nameResult","find","SelectItems","data","map","obj","station_lines","dataController","true","false","key","setKey","handleClickData","event","clickRaw","selection","setSelection","y","setY","filter","y2","handleSelectChange","_selection","target","value","filteredArray","setLineStation","top","right","bottom","left","position","textAnchor","fill"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis, ResponsiveContainer, Label} from \"recharts\";\nimport {Switch} from \"@rebass/forms\"\nimport station_id_key from \"./data/station_id_key.json\";\nimport turnstile_daily from './data/turnstile_daily.json';\nimport { ThemeProvider } from 'emotion-theming'\nimport theme from '@rebass/preset'\nimport styled from 'styled-components';\n\nconst StyledUpperMatter = styled.div`\n  display:flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width:100%;\n  align-items: center;\n  height: 3%;\n`\nconst StyledSelect = styled.div`\n\n`\n\n\nfunction RenderLineChart(props) {\n  const selectedGTFS = props.gtfs;\n  \n  const nameResult = turnstile_daily.find(({gtfs}) => gtfs === selectedGTFS);\n  //const selectedStationName = nameResult.station_lines\n  // var selectedStationName = \"\"\n  // if ((nameResult.station_lines)) {\n  //   selectedStationName = nameResult.station_lines\n  // }\n  //const selectedStationName = station_id_key.find(element => element.gtfs == selectedGTFS)['station_lines']\n  \n  //const result = inventory.find( ({ name }) => name === 'cherries' );\n\n // console.log(result) // { name: 'cherries', quantity: 5 }\n\n\n  //create options for select using station_id_key\n  const SelectItems = ({data}) => \n    (data.map(obj => \n      <option value = {obj.gtfs}>{obj.station_lines}</option>\n      ))\n\n  /* testing with daily data */\n  // const dailyController = {true: \"ent\", false:\"ext\"}\n  // const [key, setKey] = useState(true)\n  // const handleClickDaily = (event) => setKey(!key);\n\n  const dataController = {true: \"ent\", false: \"ent_pct_dif\"}\n  const [key, setKey] = useState(true)\n  const handleClickData = (event) => setKey(!key);\n  const clickRaw = (event) => setKey\n\n  const [selection, setSelection] = useState(props.gtfs)\n  const [y, setY] = useState([turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n    })])\n  \n  //version of y that just depends on the props 'gtfs'... depends if we're using the drop down at all\n  const y2 = turnstile_daily.filter(function (obj) {\n    return obj.gtfs === selectedGTFS;\n  })\n\n//handle change in the drop down menu\n  const handleSelectChange = (event) => {\n    const _selection = event.target.value;\n    setSelection(_selection);\n    const filteredArray = turnstile_daily.filter(function (obj) {\n      return obj.gtfs === _selection;\n    });\n    setY(filteredArray);\n    props.setLineStation(event.target.value)\n  }\n  // const handleBarSelect = (props.gtfs) => {\n  //   const _selection = props.gtfs;\n  //   setSelection(_selection);\n  //   const filteredArray = turnstile_daily.filter(function (obj) {\n  //     return obj.gtfs === _selection;\n  //   });\n  //   setY(filteredArray);\n  // }\n\n  //console.log(selectedGTFS)\n  //console.log(selection)\n  //console.log(turnstile_daily)\n\n  return (\n\n   \n    <div>\n      {/* <button onClick={(event) => handleClickData(event)}>Change to pct dif</button> */}\n      {/* <Switch id = \"test\" value = \"test\"/> */}\n     \n      <StyledUpperMatter> \n        <StyledSelect>\n        <select \n          onChange = {(event) => handleSelectChange(event)} \n          value = {selection}\n          >\n            <option value=\"\" selected disabled>Choose a station</option>\n            <SelectItems data = {station_id_key} />\n        </select>\n        </StyledSelect>\n        <h2>Subway Turnstile Entries by Day</h2>\n        </StyledUpperMatter>\n      \n        <LineChart\n          width = {800}\n          height = {360}\n          data={y2}\n          margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n          label={{ value: 'Turnstile Entries',position: 'insideTopRight' }}\n        >\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n          <Line type=\"monotone\" dataKey={dataController[key]} \n            stroke=\"#003049\" strokeWidth = {2.5} dot ={false} name = \"Entries\" />\n          <XAxis dataKey=\"date_time\" height = {20}/>\n          <YAxis width = {95} \n            >\n                <Label value= 'Turnstile Entries' angle= {-90} position= 'insideLeft' offset={6 }\n                 style={{ textAnchor: 'middle', fill:'grey' }}/>\n          </YAxis>\n          <Tooltip />\n        </LineChart>\n    \n\n    </div>\n  );\n}\n\nexport default RenderLineChart;\n"]},"metadata":{},"sourceType":"module"}