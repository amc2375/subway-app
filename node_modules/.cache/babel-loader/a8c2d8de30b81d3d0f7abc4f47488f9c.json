{"ast":null,"code":"var _jsxFileName = \"/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js\";\nimport React, { useState } from \"react\";\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis } from \"recharts\";\nimport station_id_key from \"./data/station_id_key.json\";\nimport turnstile_daily from './data/turnstile_daily.json';\n\nfunction RenderLineChart(props) {\n  //create options for select using station_id_key\n  const SelectItems = ({\n    data\n  }) => data.map(obj => /*#__PURE__*/React.createElement(\"option\", {\n    value: obj.gtfs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, obj.station_lines));\n  /* testing with daily data */\n\n\n  const dailyController = {\n    true: \"ent\",\n    false: \"ext\"\n  };\n  const [key, setKey] = useState(true);\n\n  const handleClickDaily = event => setKey(!key);\n\n  const [y, setY] = useState([]);\n  const [selection, setSelection] = useState(\"\"); //handle change in the drop down menu\n\n  const handleSelectChange = event => {\n    const _selection = event.target.value;\n    setSelection(_selection);\n    const filteredArray = turnstile_daily.filter(function (obj) {\n      return obj.gtfs === _selection;\n    });\n    setY(filteredArray);\n  };\n\n  console.log(props.gtfs);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => handleClickDaily(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Update Daily Data\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: event => handleSelectChange(event),\n    value: selection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    selected: true,\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Choose a station\"), /*#__PURE__*/React.createElement(SelectItems, {\n    data: station_id_key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 300,\n    data: y,\n    margin: {\n      top: 5,\n      right: 20,\n      bottom: 5,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: dailyController[key],\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"ent\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date_time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default RenderLineChart;","map":{"version":3,"sources":["/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderLineChart.js"],"names":["React","useState","CartesianGrid","Line","LineChart","Tooltip","XAxis","YAxis","station_id_key","turnstile_daily","RenderLineChart","props","SelectItems","data","map","obj","gtfs","station_lines","dailyController","true","false","key","setKey","handleClickDaily","event","y","setY","selection","setSelection","handleSelectChange","_selection","target","value","filteredArray","filter","console","log","top","right","bottom","left"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis } from \"recharts\";\nimport station_id_key from \"./data/station_id_key.json\";\nimport turnstile_daily from './data/turnstile_daily.json';\n\n\n\n\n\nfunction RenderLineChart(props) {\n\n  //create options for select using station_id_key\n  const SelectItems = ({data}) => \n    (data.map(obj => \n      <option value = {obj.gtfs}>{obj.station_lines}</option>\n      ))\n\n  /* testing with daily data */\n  const dailyController = {true: \"ent\", false:\"ext\"}\n  const [key, setKey] = useState(true)\n  const handleClickDaily = (event) => setKey(!key);\n\n  const [y, setY] = useState([])\n  const [selection, setSelection] = useState(\"\")\n\n//handle change in the drop down menu\n  const handleSelectChange = (event) => {\n    const _selection = event.target.value;\n    setSelection(_selection);\n    const filteredArray = turnstile_daily.filter(function (obj) {\n      return obj.gtfs === _selection;\n    });\n    setY(filteredArray);\n  }\n\n  console.log(props.gtfs)\n\n  return (\n    <div>\n      <button onClick={(event) => handleClickDaily(event)}>Update Daily Data</button>\n\n      <select \n        onChange = {(event) => handleSelectChange(event)} \n        value = {selection}\n        >\n          <option value=\"\" selected disabled>Choose a station</option>\n          <SelectItems data = {station_id_key} />\n        </select>\n\n\n      <LineChart\n        width={600}\n        height={300}\n        data={y}\n        margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n      >\n        <Line type=\"monotone\" dataKey={dailyController[key]} stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"ent\" stroke=\"#8884d8\" />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis dataKey=\"date_time\" />\n        <YAxis />\n        <Tooltip />\n      </LineChart>\n    </div>\n  );\n}\n\nexport default RenderLineChart;\n"]},"metadata":{},"sourceType":"module"}