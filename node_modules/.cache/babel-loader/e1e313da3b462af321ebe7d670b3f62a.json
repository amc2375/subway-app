{"ast":null,"code":"var _jsxFileName = \"/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderBarChart.js\";\nimport React, { useState } from \"react\";\nimport { Label, Radio } from '@rebass/forms';\nimport { Box } from 'rebass';\nimport { BarChart, Bar, Cell, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from \"recharts\";\nimport subways_with_tracts from './data/subways_with_tracts.json';\nimport census_metadata from './data/census_metadata.json';\n\nfunction RenderBarChart() {\n  const [barVar, setBarVar] = useState('DP05_0071PE');\n  const [data, setData] = useState(subways_with_tracts);\n  const boroughColors = [{\n    borough: \"Bk\",\n    color: \"#003049\"\n  }, {\n    borough: \"M\",\n    color: \"#d62828\"\n  }, {\n    borough: \"Q\",\n    color: \"#f77f00\"\n  }, {\n    borough: \"Bx\",\n    color: \"#fcbf49\"\n  }, {\n    borough: \"SI\",\n    color: \"#eae2b7\"\n  }];\n\n  const handleRadioClick = event => {\n    setBarVar(event.target.value);\n    const _barVar = event.target.value;\n    setData(data.sort((a, b) => b[_barVar] - a[_barVar]));\n  };\n\n  const RadioItems = ({\n    data\n  }) => data.map(obj => /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Radio, {\n    name: \"variable\",\n    id: obj.key,\n    value: obj.key,\n    onClick: event => handleRadioClick(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), obj.variable_name)));\n\n  const CustomToolTip = ({\n    active,\n    payload,\n    label\n  }) => {\n    if (active) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 23\n        }\n      }, `${label} : ${payload.value}`), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"desc\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 23\n        }\n      }, \"I am confused by this help\"));\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RadioItems, {\n    data: census_metadata,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(BarChart, {\n    width: 600,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"Stop_Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: barVar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, data.map(entry => /*#__PURE__*/React.createElement(Cell, {\n    fill: entry.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  })))));\n}\n\nexport default RenderBarChart;","map":{"version":3,"sources":["/Users/acarlson/Desktop/CSC/MTA-Data/practice-site/subway-app/src/RenderBarChart.js"],"names":["React","useState","Label","Radio","Box","BarChart","Bar","Cell","CartesianGrid","XAxis","YAxis","Tooltip","Legend","subways_with_tracts","census_metadata","RenderBarChart","barVar","setBarVar","data","setData","boroughColors","borough","color","handleRadioClick","event","target","value","_barVar","sort","a","b","RadioItems","map","obj","key","variable_name","CustomToolTip","active","payload","label","top","right","left","bottom","entry"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport {Label, Radio} from '@rebass/forms'\nimport {Box} from 'rebass'\n\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nimport subways_with_tracts from './data/subways_with_tracts.json'\nimport census_metadata from './data/census_metadata.json'\n\nfunction RenderBarChart() {\n\n    const [barVar, setBarVar] = useState('DP05_0071PE');\n    const [data, setData] = useState(subways_with_tracts);\n\n    const boroughColors = [\n        {\n            borough: \"Bk\", color: \"#003049\"\n        },\n        {\n            borough: \"M\", color: \"#d62828\"\n        },\n        {\n            borough: \"Q\", color: \"#f77f00\"\n        },\n        {\n            borough: \"Bx\", color: \"#fcbf49\"\n        },\n        {\n            borough: \"SI\", color: \"#eae2b7\"\n        }\n    ]   \n\n    const handleRadioClick = (event) => {\n        setBarVar(event.target.value);\n        const _barVar = event.target.value;\n        setData(data.sort((a,b) => b[_barVar] - a[_barVar]))\n    }\n    const RadioItems = ({data}) => \n    (data.map(obj => \n        <Box>\n            <Label>\n                <Radio\n                    name = 'variable'\n                    id = {obj.key}\n                    value = {obj.key}\n                    onClick = {(event) => handleRadioClick(event)} \n                />\n                {obj.variable_name}\n            </Label>\n        </Box>\n      ))\n\n      const CustomToolTip = ({ active, payload, label}) => {\n          if(active) {\n              return (\n                  <div className = \"custom-tooltip\">\n                      <p className = \"label\">{`${label} : ${payload.value}`}</p>\n                      <p className = \"desc\">I am confused by this help</p>\n                  </div>\n              )\n          }\n          return null;\n      }\n    return (\n        <div>\n                <RadioItems data = {census_metadata} />\n                <BarChart\n                    width={600}\n                    height={300}\n                    data={data}\n                    margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"Stop_Name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey = {barVar}>\n                        {data.map((entry) =>\n                            <Cell fill = {entry.color} />\n                        )}\n                    </Bar>\n                </BarChart>\n        </div>\n\n    );\n}\n\nexport default RenderBarChart;\n\n"]},"metadata":{},"sourceType":"module"}